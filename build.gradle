apply plugin: 'java'
//apply plugin: 'org.asciidoctor.convert'
                                                                
version='2020-03-23'


//sourceSets {
//  external {
//    java {
//      srcDir "$projectDir/."
//      include "xxxsrc/mainxxx/java/org/vishia/checkDeps_C/CheckDeps.java"
//    }
//  }
//  main {                                             
//    java {
//      compileClasspath += external.classes
//    }                                                             
//  }                                                  
//}
//



dependencies {
  implementation files('libs/junit-platform-console-standalone-1.6.0.jar')
}



sourceSets {
    main {
         java {
            srcDirs = ['src/main/java']
            //java = 'org/vishia/checkDeps_C/CheckDeps.java'
         }                                       
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

                              
 
task jcc_zipjar(type: Exec) {
  workingDir 'src/main/java/_make'
  
  environment('TMPJAVAC', '../../../../build/javac_zipjar')
  environment('VERSION', version)
  environment('DEPLOY', '../../../../deploy/vishiaZipJar-')
  //use the yet compiled class to generate jar:
  environment('JAR_zipjar', '../../../../build/javac_zipjar/binjar')  
  environment('CLASSPATH', 'xx')
  environment('SRCPATH', '..')                 //located in the workingDir  
  environment('MANIFEST', 'zipjar.manifest')  //located in the workingDir
  environment('FILE1SRC', '../org/vishia/zip/Zip.java')    //located in the workingDir
  
  executable 'sh'
  args '-c', './makejar.sh'
}


task jcc_minisys(type: Exec) {
  dependsOn jcc_zipjar
  workingDir 'src/main/java/_make'
  
  environment('TMPJAVAC', '../../../../build/javac_minisys')
  environment('VERSION', "")  //use version from _make/makejar.sh
  //use the before built jar:
  environment('JAR_zipjar', '../../../../deploy/vishiaZipJar-'+version+'.jar')  
  environment('CLASSPATH', 'xx')
  environment('DEPLOY', '../../../../deploy/vishiaMinisys-')
  environment('SRCPATH', '..')  
  environment('MANIFEST', 'minisys.manifest')
  environment('FILE1SRC', '@minisys.files')
  
  executable 'sh'
  args '-c', './makejar.sh'
}


task jcc_main(type: Exec) {
  dependsOn jcc_zipjar
  workingDir 'src/main/java/_make'
  
  environment('TMPJAVAC', '../../../../build/javac')
  environment('VERSION', "")  //use version from _make/makejar.sh
  //use the before built jar:
  environment('JAR_zipjar', '../../../../deploy/vishiaZipJar-'+version+'.jar')  
  environment('CLASSPATH', 'xx')
  environment('DEPLOY', '../../../../deploy/vishiaBase-')
  environment('SRCPATH', '..')            //relative from workingDir  
  environment('MANIFEST', 'vishiaBase.manifest')  //located in the workingDir
  environment('SRC_ALL', '..')            //relative from workingDir
  
  executable 'sh'
  args '-c', './makejar.sh'
}


//jar {                                                
//  //source('org.vishia.checkDeps_C.CheckDeps.java')
//  manifest {                                                 
//      attributes 'Main-Class': 'org.vishia.jztxtcmd.JZtxtcmd'
//   }
//}



task srcZip(type: Zip) {
  dependsOn jcc_main
  dependsOn jcc_minisys
    archiveFileName = 'vishiaBase-'+version+'-source.zip'
    //destinationDirectory = file("$buildDir/libs")
    destinationDirectory = file("deploy")

    from "src/main/java"
    include "_make/*"
    include "org/**/*"
}


//asciidoctor {
//  dependsOn srcZip
//  sourceDir = file('src/docs/asciidoc')
//  outputDir = file('.')  //create a dir html5
//  //backends = ['html', 'pdf']
//}


test {                                                                                                 
  dependsOn srcZip
  //dependsOn asciidoctor
  testLogging.showStandardStreams = true
  useJUnitPlatform {
    includeTags 'teststd'
    includeTags 'simple'
  }
}




// sourceSets {
//  main {
//    java {
//      exclude 'org.vishia.*'
//      'org.vishia.checkDeps_C.CheckDeps.java'             
//    }                                                      
//  }                                                                
//}
//

//copies the sources to one jar file, named PROJECT-sources.jar
//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
////    from javadoc.destinationDir
//}

//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}

//defaultTask 'test'


