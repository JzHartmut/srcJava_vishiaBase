package org.vishia.parseJava;

import java.util.LinkedList;
import java.util.List;

/**This file is generated by genJavaOut.jzTc script. 
 * It is the derived class to write Zbnf result. */
public class JavaContent_Zbnf extends JavaContent{

    /**Creates an instance for the result Zbnf . &lt;Classpath?PackageDefinition&gt; for ZBNF data store*/
    public Classpath_Zbnf new_PackageDefinition() { 
      Classpath_Zbnf val = new Classpath_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Classpath?PackageDefinition&gt;*/
    public void set_PackageDefinition(Classpath val) { 
      super.packageDefinition = val;
    }
    
    
    /**create and add routine for the list component <ImportStatement?importStatement>. */
    public ImportStatement_Zbnf new_importStatement() { 
      ImportStatement_Zbnf val = new ImportStatement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ImportStatement?importStatement&gt;*/
    public void add_importStatement(ImportStatement val) {
      if(super.importStatement==null) { super.importStatement = new LinkedList<ImportStatement>(); }
      super.importStatement.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition val) {
      if(super.interfaceDefinition==null) { super.interfaceDefinition = new LinkedList<InterfaceDefinition>(); }
      super.interfaceDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition val) {
      if(super.annotationDefinition==null) { super.annotationDefinition = new LinkedList<AnnotationDefinition>(); }
      super.annotationDefinition.add(val); 
    }
    
    



  /**Class for Component AccessRight.*/
  public static class AccessRight_Zbnf extends JavaContent.AccessRight {
  
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
  
  }




  /**Class for Component ExprPart.*/
  public static class ExprPart_Zbnf extends JavaContent.ExprPart {
  
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { super.operator = val; }
    
    
  
  }




  /**Class for Component Java4CAnnotationClass.*/
  public static class Java4CAnnotationClass_Zbnf extends JavaContent.Java4CAnnotationClass {
  
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { super.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { super.excludeInterface = val; }
    
    
  
  }




  /**Class for Component Java4CAnnotationMethod.*/
  public static class Java4CAnnotationMethod_Zbnf extends JavaContent.Java4CAnnotationMethod {
  
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeImpl>. */
    public void set_excludeImpl(String val) { super.excludeImpl = val; }
    
    
    /**Set routine for the singular component &lt;String?extendsOnlyMethods>. */
    public void set_extendsOnlyMethods(String val) { super.extendsOnlyMethods = val; }
    
    
    /**Set routine for the singular component &lt;String?inline>. */
    public void set_inline(String val) { super.inline = val; }
    
    
    /**Set routine for the singular component &lt;String?retinline>. */
    public void set_retinline(String val) { super.retinline = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnThis>. */
    public void set_ReturnThis(String val) { super.returnThis = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnNew>. */
    public void set_ReturnNew(String val) { super.returnNew = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { super.xxxoverride_able = val; }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { super.noThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { super.noStacktrace = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { super.instanceTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { super.embeddedTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { super.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(super.bytes==null) { super.bytes = new LinkedList<Integer>(); }
      super.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(super.typeStack==null) { super.typeStack = new LinkedList<String>(); }
      super.typeStack.add(val); 
    }
    
    
  
  }




  /**Class for Component Java4CAnnotationType.*/
  public static class Java4CAnnotationType_Zbnf extends JavaContent.Java4CAnnotationType {
  
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
  
  }




  /**Class for Component Java4CAnnotationVariable.*/
  public static class Java4CAnnotationVariable_Zbnf extends JavaContent.Java4CAnnotationVariable {
  
    /**Set routine for the singular component &lt;String?excludeCond>. */
    public void set_excludeCond(String val) { super.excludeCond = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedData>. */
    public void set_embeddedData(String val) { super.embeddedData = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { super.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { super.stackInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?InstanceType>. */
    public void set_InstanceType(String val) { super.instanceType = val; }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { super.toStringNonPersist = val; }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { super.declarePersist = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { super.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThCxt>. */
    public void set_StringBuilderInThCxt(String val) { super.stringBuilderInThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtRet>. */
    public void set_InThCxtRet(String val) { super.inThCxtRet = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtLocal>. */
    public void set_InThCxtLocal(String val) { super.inThCxtLocal = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
  
  }




  /**Class for Component ModifierClass.*/
  public static class ModifierClass_Zbnf extends JavaContent.ModifierClass {
  
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { super.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { super.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { super.excludeInterface = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
  
  }




  /**Class for Component ModifierMethod.*/
  public static class ModifierMethod_Zbnf extends JavaContent.ModifierMethod {
  
    /**Set routine for the singular component &lt;String?isSynchronized>. */
    public void set_isSynchronized(String val) { super.isSynchronized = val; }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { super.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { super.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonlyRet>. */
    public void set_isReadonlyRet(String val) { super.isReadonlyRet = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { super.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeImpl>. */
    public void set_excludeImpl(String val) { super.excludeImpl = val; }
    
    
    /**Set routine for the singular component &lt;String?extendsOnlyMethods>. */
    public void set_extendsOnlyMethods(String val) { super.extendsOnlyMethods = val; }
    
    
    /**Set routine for the singular component &lt;String?inline>. */
    public void set_inline(String val) { super.inline = val; }
    
    
    /**Set routine for the singular component &lt;String?retinline>. */
    public void set_retinline(String val) { super.retinline = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnThis>. */
    public void set_ReturnThis(String val) { super.returnThis = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnNew>. */
    public void set_ReturnNew(String val) { super.returnNew = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { super.xxxoverride_able = val; }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { super.noThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { super.noStacktrace = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { super.instanceTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { super.embeddedTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { super.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(super.bytes==null) { super.bytes = new LinkedList<Integer>(); }
      super.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(super.typeStack==null) { super.typeStack = new LinkedList<String>(); }
      super.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?A_Override>. */
    public void set_A_Override(String val) { super.a_Override = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
  
  }




  /**Class for Component ModifierVariable.*/
  public static class ModifierVariable_Zbnf extends JavaContent.ModifierVariable {
  
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isVolatile>. */
    public void set_isVolatile(String val) { super.isVolatile = val; }
    
    
    /**Set routine for the singular component &lt;String?isTransient>. */
    public void set_isTransient(String val) { super.isTransient = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { super.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { super.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeCond>. */
    public void set_excludeCond(String val) { super.excludeCond = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedData>. */
    public void set_embeddedData(String val) { super.embeddedData = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { super.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { super.stackInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?InstanceType>. */
    public void set_InstanceType(String val) { super.instanceType = val; }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { super.toStringNonPersist = val; }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { super.declarePersist = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { super.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThCxt>. */
    public void set_StringBuilderInThCxt(String val) { super.stringBuilderInThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtRet>. */
    public void set_InThCxtRet(String val) { super.inThCxtRet = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtLocal>. */
    public void set_InThCxtLocal(String val) { super.inThCxtLocal = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
  
  }




  /**Class for Component actualArguments.*/
  public static class ActualArguments_Zbnf extends JavaContent.ActualArguments {
  
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
  
  }




  /**Class for Component annotation.*/
  public static class Annotation_Zbnf extends JavaContent.Annotation {
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { 
      if(super.suppressWarnings==null) { super.suppressWarnings = new LinkedList<String>(); }
      super.suppressWarnings.add(val); 
    }
    
    
  
  }




  /**Class for Component annotationDefinition.*/
  public static class AnnotationDefinition_Zbnf extends JavaContent.AnnotationDefinition {
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { 
      if(super.suppressWarnings==null) { super.suppressWarnings = new LinkedList<String>(); }
      super.suppressWarnings.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?RententionPolicy>. */
    public void set_RententionPolicy(String val) { super.rententionPolicy = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?ident>. */
    public void set_ident(String val) { super.ident = val; }
    
    
    /**Set routine for the singular component &lt;String?param>. */
    public void set_param(String val) { 
      if(super.param==null) { super.param = new LinkedList<String>(); }
      super.param.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?type>. */
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?type&gt;*/
    public void add_type(Type val) {
      if(super.type==null) { super.type = new LinkedList<Type>(); }
      super.type.add(val); 
    }
    
    
  
  }




  /**Class for Component argument.*/
  public static class Argument_Zbnf extends JavaContent.Argument {
  
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isVolatile>. */
    public void set_isVolatile(String val) { super.isVolatile = val; }
    
    
    /**Set routine for the singular component &lt;String?isTransient>. */
    public void set_isTransient(String val) { super.isTransient = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { super.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { super.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeCond>. */
    public void set_excludeCond(String val) { super.excludeCond = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedData>. */
    public void set_embeddedData(String val) { super.embeddedData = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { super.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { super.stackInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?InstanceType>. */
    public void set_InstanceType(String val) { super.instanceType = val; }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { super.toStringNonPersist = val; }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { super.declarePersist = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { super.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThCxt>. */
    public void set_StringBuilderInThCxt(String val) { super.stringBuilderInThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtRet>. */
    public void set_InThCxtRet(String val) { super.inThCxtRet = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtLocal>. */
    public void set_InThCxtLocal(String val) { super.inThCxtLocal = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?type&gt; for ZBNF data store*/
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?type&gt;*/
    public void set_type(Type val) { 
      super.type = val;
    }
    
    
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { super.variableName = val; }
    
    
    /**Set routine for the singular component &lt;String?array>. */
    public void set_array(String val) { super.array = val; }
    
    
  
  }




  /**Class for Component argumentList.*/
  public static class ArgumentList_Zbnf extends JavaContent.ArgumentList {
  
    /**create and add routine for the list component <Argument?argument>. */
    public Argument_Zbnf new_argument() { 
      Argument_Zbnf val = new Argument_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Argument?argument&gt;*/
    public void add_argument(Argument val) {
      if(super.argument==null) { super.argument = new LinkedList<Argument>(); }
      super.argument.add(val); 
    }
    
    
  
  }




  /**Class for Component arrayElementAccess.*/
  public static class ArrayElementAccess_Zbnf extends JavaContent.ArrayElementAccess {
  
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
  
  }




  /**Class for Component assignOperator.*/
  public static class AssignOperator_Zbnf extends JavaContent.AssignOperator {
  
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { super.operator = val; }
    
    
  
  }




  /**Class for Component assignment.*/
  public static class Assignment_Zbnf extends JavaContent.Assignment {
  
    /**Creates an instance for the result Zbnf . &lt;MaybeReferencedVariable?leftValue&gt; for ZBNF data store*/
    public MaybeReferencedVariable_Zbnf new_leftValue() { 
      MaybeReferencedVariable_Zbnf val = new MaybeReferencedVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;MaybeReferencedVariable?leftValue&gt;*/
    public void set_leftValue(MaybeReferencedVariable val) { 
      super.leftValue = val;
    }
    
    
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { super.operator = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Set routine for the singular component &lt;String?increment>. */
    public void set_increment(String val) { super.increment = val; }
    
    
    /**Set routine for the singular component &lt;String?decrement>. */
    public void set_decrement(String val) { super.decrement = val; }
    
    
  
  }




  /**Class for Component caseExpr.*/
  public static class CaseExpr_Zbnf extends JavaContent.CaseExpr {
  
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement val) {
      if(super.statement==null) { super.statement = new LinkedList<Statement>(); }
      super.statement.add(val); 
    }
    
    
  
  }




  /**Class for Component catchBlock.*/
  public static class CatchBlock_Zbnf extends JavaContent.CatchBlock {
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;TypeIdent?ExceptionType&gt; for ZBNF data store*/
    public TypeIdent_Zbnf new_ExceptionType() { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;TypeIdent?ExceptionType&gt;  */
    public TypeIdent_Zbnf new_ExceptionType(String name ) { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;TypeIdent?ExceptionType&gt;*/
    public void set_ExceptionType(TypeIdent val) { 
      super.exceptionType = val;
    }
    
    
    /**Set routine for the singular component &lt;String?exceptionVariable>. */
    public void set_exceptionVariable(String val) { super.exceptionVariable = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?statementBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_statementBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?statementBlock&gt;*/
    public void set_statementBlock(StatementBlock val) { 
      super.statementBlock = val;
    }
    
    
  
  }




  /**Class for Component classContent.*/
  public static class ClassContent_Zbnf extends JavaContent.ClassContent {
  
    /**create and add routine for the list component <EnumDefinition?enumDefinition>. */
    public EnumDefinition_Zbnf new_enumDefinition() { 
      EnumDefinition_Zbnf val = new EnumDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumDefinition?enumDefinition&gt;*/
    public void add_enumDefinition(EnumDefinition val) {
      if(super.enumDefinition==null) { super.enumDefinition = new LinkedList<EnumDefinition>(); }
      super.enumDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition val) {
      if(super.interfaceDefinition==null) { super.interfaceDefinition = new LinkedList<InterfaceDefinition>(); }
      super.interfaceDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <MethodDefinition?methodDefinition>. */
    public MethodDefinition_Zbnf new_methodDefinition() { 
      MethodDefinition_Zbnf val = new MethodDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;MethodDefinition?methodDefinition&gt;*/
    public void add_methodDefinition(MethodDefinition val) {
      if(super.methodDefinition==null) { super.methodDefinition = new LinkedList<MethodDefinition>(); }
      super.methodDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ConstructorDefinition?constructorDefinition>. */
    public ConstructorDefinition_Zbnf new_constructorDefinition() { 
      ConstructorDefinition_Zbnf val = new ConstructorDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ConstructorDefinition?constructorDefinition&gt;*/
    public void add_constructorDefinition(ConstructorDefinition val) {
      if(super.constructorDefinition==null) { super.constructorDefinition = new LinkedList<ConstructorDefinition>(); }
      super.constructorDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition val) {
      if(super.annotationDefinition==null) { super.annotationDefinition = new LinkedList<AnnotationDefinition>(); }
      super.annotationDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlockStatic>. */
    public StatementBlock_Zbnf new_initializingBlockStatic() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlockStatic&gt;*/
    public void add_initializingBlockStatic(StatementBlock val) {
      if(super.initializingBlockStatic==null) { super.initializingBlockStatic = new LinkedList<StatementBlock>(); }
      super.initializingBlockStatic.add(val); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlock>. */
    public StatementBlock_Zbnf new_initializingBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlock&gt;*/
    public void add_initializingBlock(StatementBlock val) {
      if(super.initializingBlock==null) { super.initializingBlock = new LinkedList<StatementBlock>(); }
      super.initializingBlock.add(val); 
    }
    
    
  
  }




  /**Class for Component classDefinition.*/
  public static class ClassDefinition_Zbnf extends JavaContent.ClassDefinition {
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { super.suppressWarnings = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { super.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { super.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { super.excludeInterface = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
    /**Set routine for the singular component &lt;String?classident>. */
    public void set_classident(String val) { super.classident = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Generic?generic&gt; for ZBNF data store*/
    public Generic_Zbnf new_generic() { 
      Generic_Zbnf val = new Generic_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Generic?generic&gt;*/
    public void set_generic(Generic val) { 
      super.generic = val;
    }
    
    
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;TypeIdent?Superclass&gt; for ZBNF data store*/
    public TypeIdent_Zbnf new_Superclass() { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;TypeIdent?Superclass&gt;  */
    public TypeIdent_Zbnf new_Superclass(String name ) { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;TypeIdent?Superclass&gt;*/
    public void set_Superclass(TypeIdent val) { 
      super.superclass = val;
    }
    
    
    /**create and add routine for the list component <TypeIdent?ImplementedInterface>. */
    public TypeIdent_Zbnf new_ImplementedInterface() { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf(); 
      return val; 
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;TypeIdent?ImplementedInterface&gt;  */
    public TypeIdent_Zbnf new_ImplementedInterface(String name ) { 
      TypeIdent_Zbnf val = new TypeIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Add the result to the list. &lt;TypeIdent?ImplementedInterface&gt;*/
    public void add_ImplementedInterface(TypeIdent val) {
      if(super.implementedInterface==null) { super.implementedInterface = new LinkedList<TypeIdent>(); }
      super.implementedInterface.add(val); 
    }
    
    
    /**create and add routine for the list component <EnumDefinition?enumDefinition>. */
    public EnumDefinition_Zbnf new_enumDefinition() { 
      EnumDefinition_Zbnf val = new EnumDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumDefinition?enumDefinition&gt;*/
    public void add_enumDefinition(EnumDefinition val) {
      if(super.enumDefinition==null) { super.enumDefinition = new LinkedList<EnumDefinition>(); }
      super.enumDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition val) {
      if(super.interfaceDefinition==null) { super.interfaceDefinition = new LinkedList<InterfaceDefinition>(); }
      super.interfaceDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <MethodDefinition?methodDefinition>. */
    public MethodDefinition_Zbnf new_methodDefinition() { 
      MethodDefinition_Zbnf val = new MethodDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;MethodDefinition?methodDefinition&gt;*/
    public void add_methodDefinition(MethodDefinition val) {
      if(super.methodDefinition==null) { super.methodDefinition = new LinkedList<MethodDefinition>(); }
      super.methodDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ConstructorDefinition?constructorDefinition>. */
    public ConstructorDefinition_Zbnf new_constructorDefinition() { 
      ConstructorDefinition_Zbnf val = new ConstructorDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ConstructorDefinition?constructorDefinition&gt;*/
    public void add_constructorDefinition(ConstructorDefinition val) {
      if(super.constructorDefinition==null) { super.constructorDefinition = new LinkedList<ConstructorDefinition>(); }
      super.constructorDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition val) {
      if(super.annotationDefinition==null) { super.annotationDefinition = new LinkedList<AnnotationDefinition>(); }
      super.annotationDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlockStatic>. */
    public StatementBlock_Zbnf new_initializingBlockStatic() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlockStatic&gt;*/
    public void add_initializingBlockStatic(StatementBlock val) {
      if(super.initializingBlockStatic==null) { super.initializingBlockStatic = new LinkedList<StatementBlock>(); }
      super.initializingBlockStatic.add(val); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlock>. */
    public StatementBlock_Zbnf new_initializingBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlock&gt;*/
    public void add_initializingBlock(StatementBlock val) {
      if(super.initializingBlock==null) { super.initializingBlock = new LinkedList<StatementBlock>(); }
      super.initializingBlock.add(val); 
    }
    
    
  
  }




  /**Class for Component classpath.*/
  public static class Classpath_Zbnf extends JavaContent.Classpath {
  
    /**Set routine for the singular component &lt;String?packageClassName>. */
    public void set_packageClassName(String val) { 
      if(super.packageClassName==null) { super.packageClassName = new LinkedList<String>(); }
      super.packageClassName.add(val); 
    }
    
    
  
  }




  /**Class for Component condition.*/
  public static class Condition_Zbnf extends JavaContent.Condition {
  
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
  
  }




  /**Class for Component constArray.*/
  public static class ConstArray_Zbnf extends JavaContent.ConstArray {
  
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
    /**create and add routine for the list component <ConstArray?constArray>. */
    public ConstArray_Zbnf new_constArray() { 
      ConstArray_Zbnf val = new ConstArray_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ConstArray?constArray&gt;*/
    public void add_constArray(ConstArray val) {
      if(super.constArray==null) { super.constArray = new LinkedList<ConstArray>(); }
      super.constArray.add(val); 
    }
    
    
  
  }




  /**Class for Component constructorDefinition.*/
  public static class ConstructorDefinition_Zbnf extends JavaContent.ConstructorDefinition {
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?isSynchronized>. */
    public void set_isSynchronized(String val) { super.isSynchronized = val; }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { super.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { super.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonlyRet>. */
    public void set_isReadonlyRet(String val) { super.isReadonlyRet = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { super.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeImpl>. */
    public void set_excludeImpl(String val) { super.excludeImpl = val; }
    
    
    /**Set routine for the singular component &lt;String?extendsOnlyMethods>. */
    public void set_extendsOnlyMethods(String val) { super.extendsOnlyMethods = val; }
    
    
    /**Set routine for the singular component &lt;String?inline>. */
    public void set_inline(String val) { super.inline = val; }
    
    
    /**Set routine for the singular component &lt;String?retinline>. */
    public void set_retinline(String val) { super.retinline = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnThis>. */
    public void set_ReturnThis(String val) { super.returnThis = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnNew>. */
    public void set_ReturnNew(String val) { super.returnNew = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { super.xxxoverride_able = val; }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { super.noThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { super.noStacktrace = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { super.instanceTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { super.embeddedTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { super.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(super.bytes==null) { super.bytes = new LinkedList<Integer>(); }
      super.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(super.typeStack==null) { super.typeStack = new LinkedList<String>(); }
      super.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?A_Override>. */
    public void set_A_Override(String val) { super.a_Override = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
    /**Set routine for the singular component &lt;String?constructor>. */
    public void set_constructor(String val) { super.constructor = val; }
    
    
    /**create and add routine for the list component <Argument?argument>. */
    public Argument_Zbnf new_argument() { 
      Argument_Zbnf val = new Argument_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Argument?argument&gt;*/
    public void add_argument(Argument val) {
      if(super.argument==null) { super.argument = new LinkedList<Argument>(); }
      super.argument.add(val); 
    }
    
    
    /**create and add routine for the list component <ThrowsDeclaration?throwsDeclaration>. */
    public ThrowsDeclaration_Zbnf new_throwsDeclaration() { 
      ThrowsDeclaration_Zbnf val = new ThrowsDeclaration_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ThrowsDeclaration?throwsDeclaration&gt;*/
    public void add_throwsDeclaration(ThrowsDeclaration val) {
      if(super.throwsDeclaration==null) { super.throwsDeclaration = new LinkedList<ThrowsDeclaration>(); }
      super.throwsDeclaration.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SuperCall?superCall&gt; for ZBNF data store*/
    public SuperCall_Zbnf new_superCall() { 
      SuperCall_Zbnf val = new SuperCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SuperCall?superCall&gt;*/
    public void set_superCall(SuperCall val) { 
      super.superCall = val;
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement val) {
      if(super.statement==null) { super.statement = new LinkedList<Statement>(); }
      super.statement.add(val); 
    }
    
    
  
  }




  /**Class for Component description.*/
  public static class Description_Zbnf extends JavaContent.Description {
  
    /**Set routine for the singular component &lt;Test_description?content>. */
    public void set_content(Test_description val) { super.content = val; }
    
    
  
  }




  /**Class for Component dowhile_statement.*/
  public static class Dowhile_statement_Zbnf extends JavaContent.Dowhile_statement {
  
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement val) { 
      super.statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Condition?condition&gt; for ZBNF data store*/
    public Condition_Zbnf new_condition() { 
      Condition_Zbnf val = new Condition_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Condition?condition&gt;*/
    public void set_condition(Condition val) { 
      super.condition = val;
    }
    
    
  
  }




  /**Class for Component enumDefinition.*/
  public static class EnumDefinition_Zbnf extends JavaContent.EnumDefinition {
  
    /**Set routine for the singular component &lt;String?ident>. */
    public void set_ident(String val) { super.ident = val; }
    
    
    /**Set routine for the singular component &lt;String?value>. */
    public void set_value(String val) { 
      if(super.value==null) { super.value = new LinkedList<String>(); }
      super.value.add(val); 
    }
    
    
    /**create and add routine for the list component <ActualArguments?actualArguments>. */
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ActualArguments?actualArguments&gt;*/
    public void add_actualArguments(ActualArguments val) {
      if(super.actualArguments==null) { super.actualArguments = new LinkedList<ActualArguments>(); }
      super.actualArguments.add(val); 
    }
    
    
    /**create and add routine for the list component <EnumDefinition?enumDefinition>. */
    public EnumDefinition_Zbnf new_enumDefinition() { 
      EnumDefinition_Zbnf val = new EnumDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumDefinition?enumDefinition&gt;*/
    public void add_enumDefinition(EnumDefinition val) {
      if(super.enumDefinition==null) { super.enumDefinition = new LinkedList<EnumDefinition>(); }
      super.enumDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition val) {
      if(super.interfaceDefinition==null) { super.interfaceDefinition = new LinkedList<InterfaceDefinition>(); }
      super.interfaceDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <MethodDefinition?methodDefinition>. */
    public MethodDefinition_Zbnf new_methodDefinition() { 
      MethodDefinition_Zbnf val = new MethodDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;MethodDefinition?methodDefinition&gt;*/
    public void add_methodDefinition(MethodDefinition val) {
      if(super.methodDefinition==null) { super.methodDefinition = new LinkedList<MethodDefinition>(); }
      super.methodDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ConstructorDefinition?constructorDefinition>. */
    public ConstructorDefinition_Zbnf new_constructorDefinition() { 
      ConstructorDefinition_Zbnf val = new ConstructorDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ConstructorDefinition?constructorDefinition&gt;*/
    public void add_constructorDefinition(ConstructorDefinition val) {
      if(super.constructorDefinition==null) { super.constructorDefinition = new LinkedList<ConstructorDefinition>(); }
      super.constructorDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition val) {
      if(super.annotationDefinition==null) { super.annotationDefinition = new LinkedList<AnnotationDefinition>(); }
      super.annotationDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlockStatic>. */
    public StatementBlock_Zbnf new_initializingBlockStatic() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlockStatic&gt;*/
    public void add_initializingBlockStatic(StatementBlock val) {
      if(super.initializingBlockStatic==null) { super.initializingBlockStatic = new LinkedList<StatementBlock>(); }
      super.initializingBlockStatic.add(val); 
    }
    
    
    /**create and add routine for the list component <StatementBlock?initializingBlock>. */
    public StatementBlock_Zbnf new_initializingBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;StatementBlock?initializingBlock&gt;*/
    public void add_initializingBlock(StatementBlock val) {
      if(super.initializingBlock==null) { super.initializingBlock = new LinkedList<StatementBlock>(); }
      super.initializingBlock.add(val); 
    }
    
    
  
  }




  /**Class for Component envIdent.*/
  public static class EnvIdent_Zbnf extends JavaContent.EnvIdent {
  
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { super.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(super.undefGenericType==null) { super.undefGenericType = new LinkedList<String>(); }
      super.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type val) {
      if(super.genericType==null) { super.genericType = new LinkedList<Type>(); }
      super.genericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type val) {
      if(super.baseGenericKey==null) { super.baseGenericKey = new LinkedList<Type>(); }
      super.baseGenericKey.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?subIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_subIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?subIdent&gt;  */
    public EnvIdent_Zbnf new_subIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?subIdent&gt;*/
    public void set_subIdent(EnvIdent val) { 
      super.subIdent = val;
    }
    
    
  
  }




  /**Class for Component forElement_statement.*/
  public static class ForElement_statement_Zbnf extends JavaContent.ForElement_statement {
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement val) { 
      super.statement = val;
    }
    
    
  
  }




  /**Class for Component for_statement.*/
  public static class For_statement_Zbnf extends JavaContent.For_statement {
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Assignment?startAssignment&gt; for ZBNF data store*/
    public Assignment_Zbnf new_startAssignment() { 
      Assignment_Zbnf val = new Assignment_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Assignment?startAssignment&gt;*/
    public void set_startAssignment(Assignment val) { 
      super.startAssignment = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Condition?endCondition&gt; for ZBNF data store*/
    public Condition_Zbnf new_endCondition() { 
      Condition_Zbnf val = new Condition_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Condition?endCondition&gt;*/
    public void set_endCondition(Condition val) { 
      super.endCondition = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Assignment?iteratorAssignment&gt; for ZBNF data store*/
    public Assignment_Zbnf new_iteratorAssignment() { 
      Assignment_Zbnf val = new Assignment_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Assignment?iteratorAssignment&gt;*/
    public void set_iteratorAssignment(Assignment val) { 
      super.iteratorAssignment = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?iteratorExpression&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_iteratorExpression() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?iteratorExpression&gt;*/
    public void set_iteratorExpression(ExprItem val) { 
      super.iteratorExpression = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement val) { 
      super.statement = val;
    }
    
    
  
  }




  /**Class for Component generic.*/
  public static class Generic_Zbnf extends JavaContent.Generic {
  
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(super.undefGenericType==null) { super.undefGenericType = new LinkedList<String>(); }
      super.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type val) {
      if(super.genericType==null) { super.genericType = new LinkedList<Type>(); }
      super.genericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type val) {
      if(super.baseGenericKey==null) { super.baseGenericKey = new LinkedList<Type>(); }
      super.baseGenericKey.add(val); 
    }
    
    
  
  }




  /**Class for Component if_statement.*/
  public static class If_statement_Zbnf extends JavaContent.If_statement {
  
    /**Creates an instance for the result Zbnf . &lt;Condition?condition&gt; for ZBNF data store*/
    public Condition_Zbnf new_condition() { 
      Condition_Zbnf val = new Condition_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Condition?condition&gt;*/
    public void set_condition(Condition val) { 
      super.condition = val;
    }
    
    
    /**Set routine for the singular component &lt;String?noAction>. */
    public void set_noAction(String val) { super.noAction = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement val) { 
      super.statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?elseStatement&gt; for ZBNF data store*/
    public Statement_Zbnf new_elseStatement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?elseStatement&gt;*/
    public void set_elseStatement(Statement val) { 
      super.elseStatement = val;
    }
    
    
  
  }




  /**Class for Component importStatement.*/
  public static class ImportStatement_Zbnf extends JavaContent.ImportStatement {
  
    /**Set routine for the singular component &lt;String?packagePath>. */
    public void set_packagePath(String val) { 
      if(super.packagePath==null) { super.packagePath = new LinkedList<String>(); }
      super.packagePath.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?class>. */
    public void set_class(String val) { super.class___ = val; }
    
    
    /**Set routine for the singular component &lt;String?allClasses>. */
    public void set_allClasses(String val) { super.allClasses = val; }
    
    
  
  }




  /**Class for Component importpath.*/
  public static class Importpath_Zbnf extends JavaContent.Importpath {
  
    /**Set routine for the singular component &lt;String?packagePath>. */
    public void set_packagePath(String val) { 
      if(super.packagePath==null) { super.packagePath = new LinkedList<String>(); }
      super.packagePath.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?class>. */
    public void set_class(String val) { super.class___ = val; }
    
    
    /**Set routine for the singular component &lt;String?allClasses>. */
    public void set_allClasses(String val) { super.allClasses = val; }
    
    
  
  }




  /**Class for Component interfaceDefinition.*/
  public static class InterfaceDefinition_Zbnf extends JavaContent.InterfaceDefinition {
  
    /**Set routine for the singular component &lt;String?SuppressWarnings>. */
    public void set_SuppressWarnings(String val) { super.suppressWarnings = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { super.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { super.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?ExcludeInterface>. */
    public void set_ExcludeInterface(String val) { super.excludeInterface = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
    /**Set routine for the singular component &lt;String?classident>. */
    public void set_classident(String val) { super.classident = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Generic?generic&gt; for ZBNF data store*/
    public Generic_Zbnf new_generic() { 
      Generic_Zbnf val = new Generic_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Generic?generic&gt;*/
    public void set_generic(Generic val) { 
      super.generic = val;
    }
    
    
    /**Set routine for the singular component &lt;String?SuperInterface>. */
    public void set_SuperInterface(String val) { 
      if(super.superInterface==null) { super.superInterface = new LinkedList<String>(); }
      super.superInterface.add(val); 
    }
    
    
    /**create and add routine for the list component <EnumDefinition?enumDefinition>. */
    public EnumDefinition_Zbnf new_enumDefinition() { 
      EnumDefinition_Zbnf val = new EnumDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;EnumDefinition?enumDefinition&gt;*/
    public void add_enumDefinition(EnumDefinition val) {
      if(super.enumDefinition==null) { super.enumDefinition = new LinkedList<EnumDefinition>(); }
      super.enumDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <MethodDefinition?methodDefinition>. */
    public MethodDefinition_Zbnf new_methodDefinition() { 
      MethodDefinition_Zbnf val = new MethodDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;MethodDefinition?methodDefinition&gt;*/
    public void add_methodDefinition(MethodDefinition val) {
      if(super.methodDefinition==null) { super.methodDefinition = new LinkedList<MethodDefinition>(); }
      super.methodDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <InterfaceDefinition?interfaceDefinition>. */
    public InterfaceDefinition_Zbnf new_interfaceDefinition() { 
      InterfaceDefinition_Zbnf val = new InterfaceDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;InterfaceDefinition?interfaceDefinition&gt;*/
    public void add_interfaceDefinition(InterfaceDefinition val) {
      if(super.interfaceDefinition==null) { super.interfaceDefinition = new LinkedList<InterfaceDefinition>(); }
      super.interfaceDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <AnnotationDefinition?annotationDefinition>. */
    public AnnotationDefinition_Zbnf new_annotationDefinition() { 
      AnnotationDefinition_Zbnf val = new AnnotationDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;AnnotationDefinition?annotationDefinition&gt;*/
    public void add_annotationDefinition(AnnotationDefinition val) {
      if(super.annotationDefinition==null) { super.annotationDefinition = new LinkedList<AnnotationDefinition>(); }
      super.annotationDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
  
  }




  /**Class for Component java2cTag.*/
  public static class Java2cTag_Zbnf extends JavaContent.Java2cTag {
  
    /**Set routine for the singular component &lt;String?xxxfixStringBuffer>. */
    public void set_xxxfixStringBuffer(String val) { super.xxxfixStringBuffer = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { super.noObject = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { super.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { super.stackInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?return_this>. */
    public void set_return_this(String val) { super.return_this = val; }
    
    
    /**Set routine for the singular component &lt;String?return_new>. */
    public void set_return_new(String val) { super.return_new = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { super.xxxoverride_able = val; }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { super.noThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { super.noStacktrace = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeTag>. */
    public void set_instanceTypeTag(String val) { super.instanceTypeTag = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeTag>. */
    public void set_embeddedTypeTag(String val) { super.embeddedTypeTag = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { super.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(super.bytes==null) { super.bytes = new LinkedList<Integer>(); }
      super.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(super.typeStack==null) { super.typeStack = new LinkedList<String>(); }
      super.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { super.toStringNonPersist = val; }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { super.declarePersist = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { super.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThreadCxt>. */
    public void set_StringBuilderInThreadCxt(String val) { super.stringBuilderInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?returnInThreadCxt>. */
    public void set_returnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
  
  }




  /**Class for Component java2cTagParam.*/
  public static class Java2cTagParam_Zbnf extends JavaContent.Java2cTagParam {
  
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { super.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
  
  }




  /**Class for Component maybeBooleanExpr.*/
  public static class MaybeBooleanExpr_Zbnf extends JavaContent.MaybeBooleanExpr {
  
    /**Set routine for the singular component &lt;String?value_Text>. */
    public void set_value_Text(String val) { super.value_Text = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;MaybeBooleanValue?value&gt; for ZBNF data store*/
    public MaybeBooleanValue_Zbnf new_value() { 
      MaybeBooleanValue_Zbnf val = new MaybeBooleanValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;MaybeBooleanValue?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { super.operator = val; }
    
    
  
  }




  /**Class for Component maybeBooleanValue.*/
  public static class MaybeBooleanValue_Zbnf extends JavaContent.MaybeBooleanValue {
  
    /**Creates an instance for the result Zbnf . &lt;NumExpr?value&gt; for ZBNF data store*/
    public NumExpr_Zbnf new_value() { 
      NumExpr_Zbnf val = new NumExpr_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NumExpr?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?instanceOf&gt; for ZBNF data store*/
    public Type_Zbnf new_instanceOf() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?instanceOf&gt;*/
    public void set_instanceOf(Type val) { 
      super.instanceOf = val;
    }
    
    
    /**Set routine for the singular component &lt;String?cmpOperator>. */
    public void set_cmpOperator(String val) { super.cmpOperator = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;NumExpr?rightBoolExprValue&gt; for ZBNF data store*/
    public NumExpr_Zbnf new_rightBoolExprValue() { 
      NumExpr_Zbnf val = new NumExpr_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NumExpr?rightBoolExprValue&gt;*/
    public void set_rightBoolExprValue(ExprItem val) { 
      super.rightBoolExprValue = val;
    }
    
    
  
  }




  /**Class for Component maybeConditionalValue.*/
  public static class MaybeConditionalValue_Zbnf extends JavaContent.MaybeConditionalValue {
  
    /**Creates an instance for the result Zbnf . &lt;MaybeBooleanExpr?value&gt; for ZBNF data store*/
    public MaybeBooleanExpr_Zbnf new_value() { 
      MaybeBooleanExpr_Zbnf val = new MaybeBooleanExpr_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;MaybeBooleanExpr?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?trueValue&gt; for ZBNF data store*/
    public Value_Zbnf new_trueValue() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?trueValue&gt;*/
    public void set_trueValue(ExprItem val) { 
      super.trueValue = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?falseValue&gt; for ZBNF data store*/
    public Value_Zbnf new_falseValue() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?falseValue&gt;*/
    public void set_falseValue(ExprItem val) { 
      super.falseValue = val;
    }
    
    
  
  }




  /**Class for Component maybeReferencedVariable.*/
  public static class MaybeReferencedVariable_Zbnf extends JavaContent.MaybeReferencedVariable {
  
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference val) { 
      super.reference = val;
    }
    
    
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { super.variableName = val; }
    
    
    /**Set routine for the singular component &lt;String?arrayIndex>. */
    public void set_arrayIndex(String val) { super.arrayIndex = val; }
    
    
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
  
  }




  /**Class for Component methodDefinition.*/
  public static class MethodDefinition_Zbnf extends JavaContent.MethodDefinition {
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?A_Override>. */
    public void set_A_Override(String val) { super.a_Override = val; }
    
    
    /**Set routine for the singular component &lt;String?isSynchronized>. */
    public void set_isSynchronized(String val) { super.isSynchronized = val; }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isAbstract>. */
    public void set_isAbstract(String val) { super.isAbstract = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { super.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonlyRet>. */
    public void set_isReadonlyRet(String val) { super.isReadonlyRet = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { super.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeImpl>. */
    public void set_excludeImpl(String val) { super.excludeImpl = val; }
    
    
    /**Set routine for the singular component &lt;String?extendsOnlyMethods>. */
    public void set_extendsOnlyMethods(String val) { super.extendsOnlyMethods = val; }
    
    
    /**Set routine for the singular component &lt;String?inline>. */
    public void set_inline(String val) { super.inline = val; }
    
    
    /**Set routine for the singular component &lt;String?retinline>. */
    public void set_retinline(String val) { super.retinline = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnThis>. */
    public void set_ReturnThis(String val) { super.returnThis = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnNew>. */
    public void set_ReturnNew(String val) { super.returnNew = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { super.xxxoverride_able = val; }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { super.noThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { super.noStacktrace = val; }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { super.instanceTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { super.embeddedTypeAnnot = val; }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { super.stackSize = val; }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(super.bytes==null) { super.bytes = new LinkedList<Integer>(); }
      super.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(super.typeStack==null) { super.typeStack = new LinkedList<String>(); }
      super.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
    /**Set routine for the singular component &lt;String?defineGenericLocal_WhatIsThat>. */
    public void set_defineGenericLocal_WhatIsThat(String val) { super.defineGenericLocal_WhatIsThat = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?type&gt; for ZBNF data store*/
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?type&gt;*/
    public void set_type(Type val) { 
      super.type = val;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { super.name = val; }
    
    
    /**create and add routine for the list component <Argument?argument>. */
    public Argument_Zbnf new_argument() { 
      Argument_Zbnf val = new Argument_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Argument?argument&gt;*/
    public void add_argument(Argument val) {
      if(super.argument==null) { super.argument = new LinkedList<Argument>(); }
      super.argument.add(val); 
    }
    
    
    /**create and add routine for the list component <ThrowsDeclaration?throwsDeclaration>. */
    public ThrowsDeclaration_Zbnf new_throwsDeclaration() { 
      ThrowsDeclaration_Zbnf val = new ThrowsDeclaration_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ThrowsDeclaration?throwsDeclaration&gt;*/
    public void add_throwsDeclaration(ThrowsDeclaration val) {
      if(super.throwsDeclaration==null) { super.throwsDeclaration = new LinkedList<ThrowsDeclaration>(); }
      super.throwsDeclaration.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?abstractMethod>. */
    public void set_abstractMethod(String val) { super.abstractMethod = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?methodbody&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_methodbody() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?methodbody&gt;*/
    public void set_methodbody(StatementBlock val) { 
      super.methodbody = val;
    }
    
    
  
  }




  /**Class for Component newArray.*/
  public static class NewArray_Zbnf extends JavaContent.NewArray {
  
    /**Creates an instance for the result Zbnf . &lt;NonArrayType?newClass&gt; for ZBNF data store*/
    public NonArrayType_Zbnf new_newClass() { 
      NonArrayType_Zbnf val = new NonArrayType_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NonArrayType?newClass&gt;*/
    public void set_newClass(NonArrayType val) { 
      super.newClass = val;
    }
    
    
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ConstArray?constArray&gt; for ZBNF data store*/
    public ConstArray_Zbnf new_constArray() { 
      ConstArray_Zbnf val = new ConstArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ConstArray?constArray&gt;*/
    public void set_constArray(ConstArray val) { 
      super.constArray = val;
    }
    
    
  
  }




  /**Class for Component newObject.*/
  public static class NewObject_Zbnf extends JavaContent.NewObject {
  
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference val) { 
      super.reference = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;NonArrayType?newClass&gt; for ZBNF data store*/
    public NonArrayType_Zbnf new_newClass() { 
      NonArrayType_Zbnf val = new NonArrayType_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NonArrayType?newClass&gt;*/
    public void set_newClass(NonArrayType val) { 
      super.newClass = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments val) { 
      super.actualArguments = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ClassContent?impliciteImplementationClass&gt; for ZBNF data store*/
    public ClassContent_Zbnf new_impliciteImplementationClass() { 
      ClassContent_Zbnf val = new ClassContent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ClassContent?impliciteImplementationClass&gt;*/
    public void set_impliciteImplementationClass(ClassContent val) { 
      super.impliciteImplementationClass = val;
    }
    
    
  
  }




  /**Class for Component nonArrayType.*/
  public static class NonArrayType_Zbnf extends JavaContent.NonArrayType {
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?envIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_envIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?envIdent&gt;  */
    public EnvIdent_Zbnf new_envIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?envIdent&gt;*/
    public void set_envIdent(EnvIdent val) { 
      super.envIdent = val;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { super.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(super.undefGenericType==null) { super.undefGenericType = new LinkedList<String>(); }
      super.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type val) {
      if(super.genericType==null) { super.genericType = new LinkedList<Type>(); }
      super.genericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type val) {
      if(super.baseGenericKey==null) { super.baseGenericKey = new LinkedList<Type>(); }
      super.baseGenericKey.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?va_arg>. */
    public void set_va_arg(String val) { super.va_arg = val; }
    
    
  
  }




  /**Class for Component numExpr.*/
  public static class NumExpr_Zbnf extends JavaContent.NumExpr {
  
    /**Set routine for the singular component &lt;String?value_Text>. */
    public void set_value_Text(String val) { super.value_Text = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?value&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_value() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { super.operator = val; }
    
    
  
  }




  /**Class for Component paramDescription.*/
  public static class ParamDescription_Zbnf extends JavaContent.ParamDescription {
  
    /**Set routine for the singular component &lt;String?text>. */
    public void set_text(String val) { super.text = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { 
      if(super.simpleArray==null) { super.simpleArray = new LinkedList<String>(); }
      super.simpleArray.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { 
      if(super.simpleVariableRef==null) { super.simpleVariableRef = new LinkedList<String>(); }
      super.simpleVariableRef.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { 
      if(super.nonPersistent==null) { super.nonPersistent = new LinkedList<String>(); }
      super.nonPersistent.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { 
      if(super.zeroTermString==null) { super.zeroTermString = new LinkedList<String>(); }
      super.zeroTermString.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?rest>. */
    public void set_rest(String val) { 
      if(super.rest==null) { super.rest = new LinkedList<String>(); }
      super.rest.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?auxDescription>. */
    public void set_auxDescription(String val) { 
      if(super.auxDescription==null) { super.auxDescription = new LinkedList<String>(); }
      super.auxDescription.add(val); 
    }
    
    
  
  }




  /**Class for Component paramInDescription.*/
  public static class ParamInDescription_Zbnf extends JavaContent.ParamInDescription {
  
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { super.variableName = val; }
    
    
  
  }




  /**Class for Component reference.*/
  public static class Reference_Zbnf extends JavaContent.Reference {
  
    /**Set routine for the singular component &lt;String?isThis>. */
    public void set_isThis(String val) { super.isThis = val; }
    
    
    /**Set routine for the singular component &lt;String?isSuper>. */
    public void set_isSuper(String val) { super.isSuper = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewObject?newObject&gt; for ZBNF data store*/
    public NewObject_Zbnf new_newObject() { 
      NewObject_Zbnf val = new NewObject_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewObject?newObject&gt;*/
    public void set_newObject(NewObject val) { 
      super.newObject = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleMethodCall?referenceMethod&gt; for ZBNF data store*/
    public SimpleMethodCall_Zbnf new_referenceMethod() { 
      SimpleMethodCall_Zbnf val = new SimpleMethodCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleMethodCall?referenceMethod&gt;*/
    public void set_referenceMethod(SimpleMethodCall val) { 
      super.referenceMethod = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleVariable?referenceAssociation&gt; for ZBNF data store*/
    public SimpleVariable_Zbnf new_referenceAssociation() { 
      SimpleVariable_Zbnf val = new SimpleVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleVariable?referenceAssociation&gt;*/
    public void set_referenceAssociation(SimpleVariable val) { 
      super.referenceAssociation = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference val) { 
      super.reference = val;
    }
    
    
  
  }




  /**Class for Component rententionpolicy.*/
  public static class Rententionpolicy_Zbnf extends JavaContent.Rententionpolicy {
  
    /**Set routine for the singular component &lt;String?RententionPolicy>. */
    public void set_RententionPolicy(String val) { super.rententionPolicy = val; }
    
    
  
  }




  /**Class for Component returnDescription.*/
  public static class ReturnDescription_Zbnf extends JavaContent.ReturnDescription {
  
  
  }




  /**Class for Component simpleMethodCall.*/
  public static class SimpleMethodCall_Zbnf extends JavaContent.SimpleMethodCall {
  
    /**Set routine for the singular component &lt;String?methodName>. */
    public void set_methodName(String val) { super.methodName = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments val) { 
      super.actualArguments = val;
    }
    
    
  
  }




  /**Class for Component simpleValue.*/
  public static class SimpleValue_Zbnf extends JavaContent.SimpleValue {
  
    /**Set routine for the singular component &lt;String?J2Ctest>. */
    public void set_J2Ctest(String val) { super.j2Ctest = val; }
    
    
    /**Set routine for the singular component &lt;String?unaryOperator>. */
    public void set_unaryOperator(String val) { super.unaryOperator = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleStringLiteral>. */
    public void set_simpleStringLiteral(String val) { super.simpleStringLiteral = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleMethodCall?StringLiteralMethod&gt; for ZBNF data store*/
    public SimpleMethodCall_Zbnf new_StringLiteralMethod() { 
      SimpleMethodCall_Zbnf val = new SimpleMethodCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleMethodCall?StringLiteralMethod&gt;*/
    public void set_StringLiteralMethod(SimpleMethodCall val) { 
      super.stringLiteralMethod = val;
    }
    
    
    /**Set routine for the singular component &lt;String?simpleCharLiteral>. */
    public void set_simpleCharLiteral(String val) { super.simpleCharLiteral = val; }
    
    
    /**Set routine for the singular component &lt;String?booleanConst>. */
    public void set_booleanConst(String val) { super.booleanConst = val; }
    
    
    /**Set routine for the singular component &lt;String?i_RegularExpression>. */
    public void set_i_RegularExpression(String val) { super.i_RegularExpression = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?typeCast&gt; for ZBNF data store*/
    public Type_Zbnf new_typeCast() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?typeCast&gt;*/
    public void set_typeCast(Type val) { 
      super.typeCast = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Set routine for the singular component &lt;int?hexNumber>. */
    public void set_hexNumber(int val) { super.hexNumber = val; }
    
    
    /**Set routine for the singular component &lt;int?hexNumberNegative>. */
    public void set_hexNumberNegative(int val) { super.hexNumberNegative = val; }
    
    
    /**Set routine for the singular component &lt;int?intNumber>. */
    public void set_intNumber(int val) { super.intNumber = val; }
    
    
    /**Set routine for the singular component &lt;String?valueFormat>. */
    public void set_valueFormat(String val) { super.valueFormat = val; }
    
    
    /**Set routine for the singular component &lt;float?floatNumber>. */
    public void set_floatNumber(float val) { super.floatNumber = val; }
    
    
    /**Set routine for the singular component &lt;float?doubleNumber>. */
    public void set_doubleNumber(float val) { super.doubleNumber = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewArray?newArray&gt; for ZBNF data store*/
    public NewArray_Zbnf new_newArray() { 
      NewArray_Zbnf val = new NewArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewArray?newArray&gt;*/
    public void set_newArray(NewArray val) { 
      super.newArray = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewObject?newObject&gt; for ZBNF data store*/
    public NewObject_Zbnf new_newObject() { 
      NewObject_Zbnf val = new NewObject_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewObject?newObject&gt;*/
    public void set_newObject(NewObject val) { 
      super.newObject = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleMethodCall?simpleMethodCall&gt; for ZBNF data store*/
    public SimpleMethodCall_Zbnf new_simpleMethodCall() { 
      SimpleMethodCall_Zbnf val = new SimpleMethodCall_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleMethodCall?simpleMethodCall&gt;*/
    public void set_simpleMethodCall(SimpleMethodCall val) { 
      super.simpleMethodCall = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleVariable?simpleVariable&gt; for ZBNF data store*/
    public SimpleVariable_Zbnf new_simpleVariable() { 
      SimpleVariable_Zbnf val = new SimpleVariable_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleVariable?simpleVariable&gt;*/
    public void set_simpleVariable(SimpleVariable val) { 
      super.simpleVariable = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference val) { 
      super.reference = val;
    }
    
    
    /**Set routine for the singular component &lt;String?TypeReflect>. */
    public void set_TypeReflect(String val) { super.typeReflect = val; }
    
    
    /**Set routine for the singular component &lt;String?preDecrement>. */
    public void set_preDecrement(String val) { super.preDecrement = val; }
    
    
    /**Set routine for the singular component &lt;String?preIncrement>. */
    public void set_preIncrement(String val) { super.preIncrement = val; }
    
    
    /**Set routine for the singular component &lt;String?postDecrement>. */
    public void set_postDecrement(String val) { super.postDecrement = val; }
    
    
    /**Set routine for the singular component &lt;String?postIncrement>. */
    public void set_postIncrement(String val) { super.postIncrement = val; }
    
    
    /**Set routine for the singular component &lt;String?classObject>. */
    public void set_classObject(String val) { super.classObject = val; }
    
    
    /**Set routine for the singular component &lt;String?parenthesisExpression>. */
    public void set_parenthesisExpression(String val) { super.parenthesisExpression = val; }
    
    
    /**Set routine for the singular component &lt;String?nullRef>. */
    public void set_nullRef(String val) { super.nullRef = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Assignment?assignment&gt; for ZBNF data store*/
    public Assignment_Zbnf new_assignment() { 
      Assignment_Zbnf val = new Assignment_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Assignment?assignment&gt;*/
    public void set_assignment(Assignment val) { 
      super.assignment = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ArrayElementAccess?arrayElementAccess&gt; for ZBNF data store*/
    public ArrayElementAccess_Zbnf new_arrayElementAccess() { 
      ArrayElementAccess_Zbnf val = new ArrayElementAccess_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ArrayElementAccess?arrayElementAccess&gt;*/
    public void set_arrayElementAccess(ArrayElementAccess val) { 
      super.arrayElementAccess = val;
    }
    
    
  
  }




  /**Class for Component simpleVariable.*/
  public static class SimpleVariable_Zbnf extends JavaContent.SimpleVariable {
  
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { super.variableName = val; }
    
    
    /**Set routine for the singular component &lt;String?arrayIndex>. */
    public void set_arrayIndex(String val) { super.arrayIndex = val; }
    
    
    /**create and add routine for the list component <Value?value>. */
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Value?value&gt;*/
    public void add_value(ExprItem val) {
      if(super.value==null) { super.value = new LinkedList<ExprItem>(); }
      super.value.add(val); 
    }
    
    
  
  }




  /**Class for Component statement.*/
  public static class Statement_Zbnf extends JavaContent.Statement {
  
    /**Set routine for the singular component &lt;String?J2Ctest>. */
    public void set_J2Ctest(String val) { super.j2Ctest = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?emtypStatementBlock>. */
    public void set_emtypStatementBlock(String val) { super.emtypStatementBlock = val; }
    
    
    /**Set routine for the singular component &lt;String?emptyStatement>. */
    public void set_emptyStatement(String val) { super.emptyStatement = val; }
    
    
    /**Set routine for the singular component &lt;String?synchronizedBock>. */
    public void set_synchronizedBock(String val) { super.synchronizedBock = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?synchronizedObject&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_synchronizedObject() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?synchronizedObject&gt;*/
    public void set_synchronizedObject(ExprItem val) { 
      super.synchronizedObject = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?statementBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_statementBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?statementBlock&gt;*/
    public void set_statementBlock(StatementBlock val) { 
      super.statementBlock = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;If_statement?if_statement&gt; for ZBNF data store*/
    public If_statement_Zbnf new_if_statement() { 
      If_statement_Zbnf val = new If_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;If_statement?if_statement&gt;*/
    public void set_if_statement(If_statement val) { 
      super.if_statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Switch_statement?switch_statement&gt; for ZBNF data store*/
    public Switch_statement_Zbnf new_switch_statement() { 
      Switch_statement_Zbnf val = new Switch_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Switch_statement?switch_statement&gt;*/
    public void set_switch_statement(Switch_statement val) { 
      super.switch_statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;While_statement?while_statement&gt; for ZBNF data store*/
    public While_statement_Zbnf new_while_statement() { 
      While_statement_Zbnf val = new While_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;While_statement?while_statement&gt;*/
    public void set_while_statement(While_statement val) { 
      super.while_statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Dowhile_statement?dowhile_statement&gt; for ZBNF data store*/
    public Dowhile_statement_Zbnf new_dowhile_statement() { 
      Dowhile_statement_Zbnf val = new Dowhile_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Dowhile_statement?dowhile_statement&gt;*/
    public void set_dowhile_statement(Dowhile_statement val) { 
      super.dowhile_statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ForElement_statement?forElement_statement&gt; for ZBNF data store*/
    public ForElement_statement_Zbnf new_forElement_statement() { 
      ForElement_statement_Zbnf val = new ForElement_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ForElement_statement?forElement_statement&gt;*/
    public void set_forElement_statement(ForElement_statement val) { 
      super.forElement_statement = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;For_statement?for_statement&gt; for ZBNF data store*/
    public For_statement_Zbnf new_for_statement() { 
      For_statement_Zbnf val = new For_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;For_statement?for_statement&gt;*/
    public void set_for_statement(For_statement val) { 
      super.for_statement = val;
    }
    
    
    /**Set routine for the singular component &lt;String?throwNew>. */
    public void set_throwNew(String val) { super.throwNew = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?exceptionClass&gt; for ZBNF data store*/
    public Type_Zbnf new_exceptionClass() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?exceptionClass&gt;*/
    public void set_exceptionClass(Type val) { 
      super.exceptionClass = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value2&gt; for ZBNF data store*/
    public Value_Zbnf new_value2() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value2&gt;*/
    public void set_value2(ExprItem val) { 
      super.value2 = val;
    }
    
    
    /**Set routine for the singular component &lt;String?throwExc>. */
    public void set_throwExc(String val) { super.throwExc = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Try_statement?try_statement&gt; for ZBNF data store*/
    public Try_statement_Zbnf new_try_statement() { 
      Try_statement_Zbnf val = new Try_statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Try_statement?try_statement&gt;*/
    public void set_try_statement(Try_statement val) { 
      super.try_statement = val;
    }
    
    
    /**Set routine for the singular component &lt;String?returnStmnt>. */
    public void set_returnStmnt(String val) { super.returnStmnt = val; }
    
    
    /**Set routine for the singular component &lt;String?break_statement>. */
    public void set_break_statement(String val) { super.break_statement = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;SimpleValue?simpleValue&gt; for ZBNF data store*/
    public SimpleValue_Zbnf new_simpleValue() { 
      SimpleValue_Zbnf val = new SimpleValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;SimpleValue?simpleValue&gt;*/
    public void set_simpleValue(ExprItem val) { 
      super.simpleValue = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Assignment?assignment&gt; for ZBNF data store*/
    public Assignment_Zbnf new_assignment() { 
      Assignment_Zbnf val = new Assignment_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Assignment?assignment&gt;*/
    public void set_assignment(Assignment val) { 
      super.assignment = val;
    }
    
    
    /**Set routine for the singular component &lt;String?descriptionInline>. */
    public void set_descriptionInline(String val) { super.descriptionInline = val; }
    
    
  
  }




  /**Class for Component statementBlock.*/
  public static class StatementBlock_Zbnf extends JavaContent.StatementBlock {
  
    /**Set routine for the singular component &lt;String?descriptionOfBlock>. */
    public void set_descriptionOfBlock(String val) { 
      if(super.descriptionOfBlock==null) { super.descriptionOfBlock = new LinkedList<String>(); }
      super.descriptionOfBlock.add(val); 
    }
    
    
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement val) {
      if(super.statement==null) { super.statement = new LinkedList<Statement>(); }
      super.statement.add(val); 
    }
    
    
  
  }




  /**Class for Component statementsOrDefinition.*/
  public static class StatementsOrDefinition_Zbnf extends JavaContent.StatementsOrDefinition {
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <ClassDefinition?classDefinition>. */
    public ClassDefinition_Zbnf new_classDefinition() { 
      ClassDefinition_Zbnf val = new ClassDefinition_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ClassDefinition?classDefinition&gt;*/
    public void add_classDefinition(ClassDefinition val) {
      if(super.classDefinition==null) { super.classDefinition = new LinkedList<ClassDefinition>(); }
      super.classDefinition.add(val); 
    }
    
    
    /**create and add routine for the list component <Statement?statement>. */
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Statement?statement&gt;*/
    public void add_statement(Statement val) {
      if(super.statement==null) { super.statement = new LinkedList<Statement>(); }
      super.statement.add(val); 
    }
    
    
  
  }




  /**Class for Component superCall.*/
  public static class SuperCall_Zbnf extends JavaContent.SuperCall {
  
    /**Creates an instance for the result Zbnf . &lt;Reference?reference&gt; for ZBNF data store*/
    public Reference_Zbnf new_reference() { 
      Reference_Zbnf val = new Reference_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Reference?reference&gt;*/
    public void set_reference(Reference val) { 
      super.reference = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ActualArguments?actualArguments&gt; for ZBNF data store*/
    public ActualArguments_Zbnf new_actualArguments() { 
      ActualArguments_Zbnf val = new ActualArguments_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ActualArguments?actualArguments&gt;*/
    public void set_actualArguments(ActualArguments val) { 
      super.actualArguments = val;
    }
    
    
  
  }




  /**Class for Component switch_statement.*/
  public static class Switch_statement_Zbnf extends JavaContent.Switch_statement {
  
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**create and add routine for the list component <CaseExpr?caseExpr>. */
    public CaseExpr_Zbnf new_caseExpr() { 
      CaseExpr_Zbnf val = new CaseExpr_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;CaseExpr?caseExpr&gt;*/
    public void add_caseExpr(CaseExpr val) {
      if(super.caseExpr==null) { super.caseExpr = new LinkedList<CaseExpr>(); }
      super.caseExpr.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementsOrDefinition?defaultExpr&gt; for ZBNF data store*/
    public StatementsOrDefinition_Zbnf new_defaultExpr() { 
      StatementsOrDefinition_Zbnf val = new StatementsOrDefinition_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementsOrDefinition?defaultExpr&gt;*/
    public void set_defaultExpr(StatementsOrDefinition val) { 
      super.defaultExpr = val;
    }
    
    
  
  }




  /**Class for Component test_description.*/
  public static class Test_description_Zbnf extends JavaContent.Test_description {
  
    /**Set routine for the singular component &lt;String?text>. */
    public void set_text(String val) { super.text = val; }
    
    
    /**Set routine for the singular component &lt;String?sizeofDescription>. */
    public void set_sizeofDescription(String val) { 
      if(super.sizeofDescription==null) { super.sizeofDescription = new LinkedList<String>(); }
      super.sizeofDescription.add(val); 
    }
    
    
    /**create and add routine for the list component <ReturnDescription?returnDescription>. */
    public ReturnDescription_Zbnf new_returnDescription() { 
      ReturnDescription_Zbnf val = new ReturnDescription_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ReturnDescription?returnDescription&gt;*/
    public void add_returnDescription(ReturnDescription val) {
      if(super.returnDescription==null) { super.returnDescription = new LinkedList<ReturnDescription>(); }
      super.returnDescription.add(val); 
    }
    
    
    /**create and add routine for the list component <ParamInDescription?paramInDescription>. */
    public ParamInDescription_Zbnf new_paramInDescription() { 
      ParamInDescription_Zbnf val = new ParamInDescription_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;ParamInDescription?paramInDescription&gt;*/
    public void add_paramInDescription(ParamInDescription val) {
      if(super.paramInDescription==null) { super.paramInDescription = new LinkedList<ParamInDescription>(); }
      super.paramInDescription.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { 
      if(super.staticInstance==null) { super.staticInstance = new LinkedList<String>(); }
      super.staticInstance.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?xxxfixStringBuffer>. */
    public void set_xxxfixStringBuffer(String val) { 
      if(super.xxxfixStringBuffer==null) { super.xxxfixStringBuffer = new LinkedList<String>(); }
      super.xxxfixStringBuffer.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { 
      if(super.simpleArray==null) { super.simpleArray = new LinkedList<String>(); }
      super.simpleArray.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { 
      if(super.simpleVariableRef==null) { super.simpleVariableRef = new LinkedList<String>(); }
      super.simpleVariableRef.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { 
      if(super.embeddedYElements==null) { super.embeddedYElements = new LinkedList<String>(); }
      super.embeddedYElements.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noObject>. */
    public void set_noObject(String val) { 
      if(super.noObject==null) { super.noObject = new LinkedList<String>(); }
      super.noObject.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { 
      if(super.noGC==null) { super.noGC = new LinkedList<String>(); }
      super.noGC.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { 
      if(super.nonPersistent==null) { super.nonPersistent = new LinkedList<String>(); }
      super.nonPersistent.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { 
      if(super.stackInstance==null) { super.stackInstance = new LinkedList<String>(); }
      super.stackInstance.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { 
      if(super.zeroTermString==null) { super.zeroTermString = new LinkedList<String>(); }
      super.zeroTermString.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { 
      if(super.byteStringJc==null) { super.byteStringJc = new LinkedList<String>(); }
      super.byteStringJc.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?return_this>. */
    public void set_return_this(String val) { 
      if(super.return_this==null) { super.return_this = new LinkedList<String>(); }
      super.return_this.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?return_new>. */
    public void set_return_new(String val) { 
      if(super.return_new==null) { super.return_new = new LinkedList<String>(); }
      super.return_new.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { 
      if(super.dynamic_call==null) { super.dynamic_call = new LinkedList<String>(); }
      super.dynamic_call.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?xxxoverride_able>. */
    public void set_xxxoverride_able(String val) { 
      if(super.xxxoverride_able==null) { super.xxxoverride_able = new LinkedList<String>(); }
      super.xxxoverride_able.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noThCxt>. */
    public void set_noThCxt(String val) { 
      if(super.noThCxt==null) { super.noThCxt = new LinkedList<String>(); }
      super.noThCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?noStacktrace>. */
    public void set_noStacktrace(String val) { 
      if(super.noStacktrace==null) { super.noStacktrace = new LinkedList<String>(); }
      super.noStacktrace.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeTag>. */
    public void set_instanceTypeTag(String val) { 
      if(super.instanceTypeTag==null) { super.instanceTypeTag = new LinkedList<String>(); }
      super.instanceTypeTag.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeTag>. */
    public void set_embeddedTypeTag(String val) { 
      if(super.embeddedTypeTag==null) { super.embeddedTypeTag = new LinkedList<String>(); }
      super.embeddedTypeTag.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?stackSize>. */
    public void set_stackSize(String val) { 
      if(super.stackSize==null) { super.stackSize = new LinkedList<String>(); }
      super.stackSize.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;int?bytes>. */
    public void set_bytes(int val) { 
      if(super.bytes==null) { super.bytes = new LinkedList<Integer>(); }
      super.bytes.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?typeStack>. */
    public void set_typeStack(String val) { 
      if(super.typeStack==null) { super.typeStack = new LinkedList<String>(); }
      super.typeStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { 
      if(super.toStringNonPersist==null) { super.toStringNonPersist = new LinkedList<String>(); }
      super.toStringNonPersist.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { 
      if(super.declarePersist==null) { super.declarePersist = new LinkedList<String>(); }
      super.declarePersist.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { 
      if(super.stringBuilderInStack==null) { super.stringBuilderInStack = new LinkedList<Integer>(); }
      super.stringBuilderInStack.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThreadCxt>. */
    public void set_StringBuilderInThreadCxt(String val) { 
      if(super.stringBuilderInThreadCxt==null) { super.stringBuilderInThreadCxt = new LinkedList<String>(); }
      super.stringBuilderInThreadCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?returnInThreadCxt>. */
    public void set_returnInThreadCxt(String val) { 
      if(super.returnInThreadCxt==null) { super.returnInThreadCxt = new LinkedList<String>(); }
      super.returnInThreadCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?rest>. */
    public void set_rest(String val) { 
      if(super.rest==null) { super.rest = new LinkedList<String>(); }
      super.rest.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?excludeCond>. */
    public void set_excludeCond(String val) { 
      if(super.excludeCond==null) { super.excludeCond = new LinkedList<String>(); }
      super.excludeCond.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { 
      if(super.exclude==null) { super.exclude = new LinkedList<String>(); }
      super.exclude.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?embeddedData>. */
    public void set_embeddedData(String val) { 
      if(super.embeddedData==null) { super.embeddedData = new LinkedList<String>(); }
      super.embeddedData.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?InstanceType>. */
    public void set_InstanceType(String val) { 
      if(super.instanceType==null) { super.instanceType = new LinkedList<String>(); }
      super.instanceType.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThCxt>. */
    public void set_StringBuilderInThCxt(String val) { 
      if(super.stringBuilderInThCxt==null) { super.stringBuilderInThCxt = new LinkedList<String>(); }
      super.stringBuilderInThCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?InThCxtRet>. */
    public void set_InThCxtRet(String val) { 
      if(super.inThCxtRet==null) { super.inThCxtRet = new LinkedList<String>(); }
      super.inThCxtRet.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?InThCxtLocal>. */
    public void set_InThCxtLocal(String val) { 
      if(super.inThCxtLocal==null) { super.inThCxtLocal = new LinkedList<String>(); }
      super.inThCxtLocal.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { 
      if(super.returnInThreadCxt==null) { super.returnInThreadCxt = new LinkedList<String>(); }
      super.returnInThreadCxt.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { 
      if(super.fixArraySize==null) { super.fixArraySize = new LinkedList<Integer>(); }
      super.fixArraySize.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { 
      if(super.ptrVal==null) { super.ptrVal = new LinkedList<String>(); }
      super.ptrVal.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { 
      if(super.stringJc==null) { super.stringJc = new LinkedList<String>(); }
      super.stringJc.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?excludeImpl>. */
    public void set_excludeImpl(String val) { 
      if(super.excludeImpl==null) { super.excludeImpl = new LinkedList<String>(); }
      super.excludeImpl.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?extendsOnlyMethods>. */
    public void set_extendsOnlyMethods(String val) { 
      if(super.extendsOnlyMethods==null) { super.extendsOnlyMethods = new LinkedList<String>(); }
      super.extendsOnlyMethods.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?inline>. */
    public void set_inline(String val) { 
      if(super.inline==null) { super.inline = new LinkedList<String>(); }
      super.inline.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?retinline>. */
    public void set_retinline(String val) { 
      if(super.retinline==null) { super.retinline = new LinkedList<String>(); }
      super.retinline.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?ReturnThis>. */
    public void set_ReturnThis(String val) { 
      if(super.returnThis==null) { super.returnThis = new LinkedList<String>(); }
      super.returnThis.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?ReturnNew>. */
    public void set_ReturnNew(String val) { 
      if(super.returnNew==null) { super.returnNew = new LinkedList<String>(); }
      super.returnNew.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?instanceTypeAnnot>. */
    public void set_instanceTypeAnnot(String val) { 
      if(super.instanceTypeAnnot==null) { super.instanceTypeAnnot = new LinkedList<String>(); }
      super.instanceTypeAnnot.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?embeddedTypeAnnot>. */
    public void set_embeddedTypeAnnot(String val) { 
      if(super.embeddedTypeAnnot==null) { super.embeddedTypeAnnot = new LinkedList<String>(); }
      super.embeddedTypeAnnot.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?auxDescription>. */
    public void set_auxDescription(String val) { 
      if(super.auxDescription==null) { super.auxDescription = new LinkedList<String>(); }
      super.auxDescription.add(val); 
    }
    
    
  
  }




  /**Class for Component throwsDeclaration.*/
  public static class ThrowsDeclaration_Zbnf extends JavaContent.ThrowsDeclaration {
  
  
  }




  /**Class for Component try_statement.*/
  public static class Try_statement_Zbnf extends JavaContent.Try_statement {
  
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?statementBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_statementBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?statementBlock&gt;*/
    public void set_statementBlock(StatementBlock val) { 
      super.statementBlock = val;
    }
    
    
    /**create and add routine for the list component <CatchBlock?catchBlock>. */
    public CatchBlock_Zbnf new_catchBlock() { 
      CatchBlock_Zbnf val = new CatchBlock_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;CatchBlock?catchBlock&gt;*/
    public void add_catchBlock(CatchBlock val) {
      if(super.catchBlock==null) { super.catchBlock = new LinkedList<CatchBlock>(); }
      super.catchBlock.add(val); 
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;StatementBlock?finallyBlock&gt; for ZBNF data store*/
    public StatementBlock_Zbnf new_finallyBlock() { 
      StatementBlock_Zbnf val = new StatementBlock_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;StatementBlock?finallyBlock&gt;*/
    public void set_finallyBlock(StatementBlock val) { 
      super.finallyBlock = val;
    }
    
    
  
  }




  /**Class for Component type.*/
  public static class Type_Zbnf extends JavaContent.Type {
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?envIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_envIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?envIdent&gt;  */
    public EnvIdent_Zbnf new_envIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?envIdent&gt;*/
    public void set_envIdent(EnvIdent val) { 
      super.envIdent = val;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { super.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(super.undefGenericType==null) { super.undefGenericType = new LinkedList<String>(); }
      super.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type val) {
      if(super.genericType==null) { super.genericType = new LinkedList<Type>(); }
      super.genericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type val) {
      if(super.baseGenericKey==null) { super.baseGenericKey = new LinkedList<Type>(); }
      super.baseGenericKey.add(val); 
    }
    
    
    /**Set routine for the singular component &lt;String?va_arg>. */
    public void set_va_arg(String val) { super.va_arg = val; }
    
    
    /**Set routine for the singular component &lt;String?typeArray>. */
    public void set_typeArray(String val) { 
      if(super.typeArray==null) { super.typeArray = new LinkedList<String>(); }
      super.typeArray.add(val); 
    }
    
    
  
  }




  /**Class for Component typeIdent.*/
  public static class TypeIdent_Zbnf extends JavaContent.TypeIdent {
  
    /**Creates an instance for the result Zbnf  (not Xml) . &lt;EnvIdent?envIdent&gt; for ZBNF data store*/
    public EnvIdent_Zbnf new_envIdent() { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Creates an instance for the Xml data storage with default attibutes. &lt;EnvIdent?envIdent&gt;  */
    public EnvIdent_Zbnf new_envIdent(String name ) { 
      EnvIdent_Zbnf val = new EnvIdent_Zbnf();
      val.name = name;
      //
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;EnvIdent?envIdent&gt;*/
    public void set_envIdent(EnvIdent val) { 
      super.envIdent = val;
    }
    
    
    /**Set routine for the singular component &lt;String?name>. */
    public void set_name(String val) { super.name = val; }
    
    
    /**Set routine for the singular component &lt;String?undefGenericType>. */
    public void set_undefGenericType(String val) { 
      if(super.undefGenericType==null) { super.undefGenericType = new LinkedList<String>(); }
      super.undefGenericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?GenericType>. */
    public Type_Zbnf new_GenericType() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?GenericType&gt;*/
    public void add_GenericType(Type val) {
      if(super.genericType==null) { super.genericType = new LinkedList<Type>(); }
      super.genericType.add(val); 
    }
    
    
    /**create and add routine for the list component <Type?baseGenericKey>. */
    public Type_Zbnf new_baseGenericKey() { 
      Type_Zbnf val = new Type_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;Type?baseGenericKey&gt;*/
    public void add_baseGenericKey(Type val) {
      if(super.baseGenericKey==null) { super.baseGenericKey = new LinkedList<Type>(); }
      super.baseGenericKey.add(val); 
    }
    
    
  
  }




  /**Class for Component unaryOperator.*/
  public static class UnaryOperator_Zbnf extends JavaContent.UnaryOperator {
  
    /**Set routine for the singular component &lt;String?unaryOperator>. */
    public void set_unaryOperator(String val) { super.unaryOperator = val; }
    
    
  
  }




  /**Class for Component value.*/
  public static class Value_Zbnf extends JavaContent.Value {
  
    /**Set routine for the singular component &lt;String?value_Text>. */
    public void set_value_Text(String val) { super.value_Text = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;MaybeConditionalValue?value&gt; for ZBNF data store*/
    public MaybeConditionalValue_Zbnf new_value() { 
      MaybeConditionalValue_Zbnf val = new MaybeConditionalValue_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;MaybeConditionalValue?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
    /**Set routine for the singular component &lt;String?operator>. */
    public void set_operator(String val) { super.operator = val; }
    
    
  
  }




  /**Class for Component variableDefinition.*/
  public static class VariableDefinition_Zbnf extends JavaContent.VariableDefinition {
  
    /**create and add routine for the list component <VariableInstance?variableDefinition>. */
    public VariableInstance_Zbnf new_variableDefinition() { 
      VariableInstance_Zbnf val = new VariableInstance_Zbnf(); 
      return val; 
    }
    
    /**Add the result to the list. &lt;VariableInstance?variableDefinition&gt;*/
    public void add_variableDefinition(VariableInstance val) {
      if(super.variableDefinition==null) { super.variableDefinition = new LinkedList<VariableInstance>(); }
      super.variableDefinition.add(val); 
    }
    
    
  
  }




  /**Class for Component variableInstance.*/
  public static class VariableInstance_Zbnf extends JavaContent.VariableInstance {
  
    /**Creates an instance for the result Zbnf . &lt;Description?description&gt; for ZBNF data store*/
    public Description_Zbnf new_description() { 
      Description_Zbnf val = new Description_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Description?description&gt;*/
    public void set_description(Description val) { 
      super.description = val;
    }
    
    
    /**Set routine for the singular component &lt;String?isStatic>. */
    public void set_isStatic(String val) { super.isStatic = val; }
    
    
    /**Set routine for the singular component &lt;String?isFinal>. */
    public void set_isFinal(String val) { super.isFinal = val; }
    
    
    /**Set routine for the singular component &lt;String?isVolatile>. */
    public void set_isVolatile(String val) { super.isVolatile = val; }
    
    
    /**Set routine for the singular component &lt;String?isTransient>. */
    public void set_isTransient(String val) { super.isTransient = val; }
    
    
    /**Set routine for the singular component &lt;String?accessPlolicy>. */
    public void set_accessPlolicy(String val) { super.accessPlolicy = val; }
    
    
    /**Set routine for the singular component &lt;String?isReadonly>. */
    public void set_isReadonly(String val) { super.isReadonly = val; }
    
    
    /**Set routine for the singular component &lt;String?excludeCond>. */
    public void set_excludeCond(String val) { super.excludeCond = val; }
    
    
    /**Set routine for the singular component &lt;String?exclude>. */
    public void set_exclude(String val) { super.exclude = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedData>. */
    public void set_embeddedData(String val) { super.embeddedData = val; }
    
    
    /**Set routine for the singular component &lt;String?dynamic_call>. */
    public void set_dynamic_call(String val) { super.dynamic_call = val; }
    
    
    /**Set routine for the singular component &lt;String?staticInstance>. */
    public void set_staticInstance(String val) { super.staticInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?nonPersistent>. */
    public void set_nonPersistent(String val) { super.nonPersistent = val; }
    
    
    /**Set routine for the singular component &lt;String?stackInstance>. */
    public void set_stackInstance(String val) { super.stackInstance = val; }
    
    
    /**Set routine for the singular component &lt;String?InstanceType>. */
    public void set_InstanceType(String val) { super.instanceType = val; }
    
    
    /**Set routine for the singular component &lt;String?toStringNonPersist>. */
    public void set_toStringNonPersist(String val) { super.toStringNonPersist = val; }
    
    
    /**Set routine for the singular component &lt;String?declarePersist>. */
    public void set_declarePersist(String val) { super.declarePersist = val; }
    
    
    /**Set routine for the singular component &lt;int?StringBuilderInStack>. */
    public void set_StringBuilderInStack(int val) { super.stringBuilderInStack = val; }
    
    
    /**Set routine for the singular component &lt;String?StringBuilderInThCxt>. */
    public void set_StringBuilderInThCxt(String val) { super.stringBuilderInThCxt = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtRet>. */
    public void set_InThCxtRet(String val) { super.inThCxtRet = val; }
    
    
    /**Set routine for the singular component &lt;String?InThCxtLocal>. */
    public void set_InThCxtLocal(String val) { super.inThCxtLocal = val; }
    
    
    /**Set routine for the singular component &lt;String?ReturnInThreadCxt>. */
    public void set_ReturnInThreadCxt(String val) { super.returnInThreadCxt = val; }
    
    
    /**Set routine for the singular component &lt;int?fixArraySize>. */
    public void set_fixArraySize(int val) { super.fixArraySize = val; }
    
    
    /**Set routine for the singular component &lt;String?noGC>. */
    public void set_noGC(String val) { super.noGC = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleVariableRef>. */
    public void set_simpleVariableRef(String val) { super.simpleVariableRef = val; }
    
    
    /**Set routine for the singular component &lt;String?simpleArray>. */
    public void set_simpleArray(String val) { super.simpleArray = val; }
    
    
    /**Set routine for the singular component &lt;String?PtrVal>. */
    public void set_PtrVal(String val) { super.ptrVal = val; }
    
    
    /**Set routine for the singular component &lt;String?embeddedYElements>. */
    public void set_embeddedYElements(String val) { super.embeddedYElements = val; }
    
    
    /**Set routine for the singular component &lt;String?zeroTermString>. */
    public void set_zeroTermString(String val) { super.zeroTermString = val; }
    
    
    /**Set routine for the singular component &lt;String?ByteStringJc>. */
    public void set_ByteStringJc(String val) { super.byteStringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?StringJc>. */
    public void set_StringJc(String val) { super.stringJc = val; }
    
    
    /**Set routine for the singular component &lt;String?Annotation>. */
    public void set_Annotation(String val) { super.annotation = val; }
    
    
    /**Set routine for the singular component &lt;String?isPublic>. */
    public void set_isPublic(String val) { super.isPublic = val; }
    
    
    /**Set routine for the singular component &lt;String?isPrivate>. */
    public void set_isPrivate(String val) { super.isPrivate = val; }
    
    
    /**Set routine for the singular component &lt;String?isProtected>. */
    public void set_isProtected(String val) { super.isProtected = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;Type?type&gt; for ZBNF data store*/
    public Type_Zbnf new_type() { 
      Type_Zbnf val = new Type_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Type?type&gt;*/
    public void set_type(Type val) { 
      super.type = val;
    }
    
    
    /**Set routine for the singular component &lt;String?variableName>. */
    public void set_variableName(String val) { super.variableName = val; }
    
    
    /**Set routine for the singular component &lt;String?array>. */
    public void set_array(String val) { super.array = val; }
    
    
    /**Creates an instance for the result Zbnf . &lt;NewArray?newArray&gt; for ZBNF data store*/
    public NewArray_Zbnf new_newArray() { 
      NewArray_Zbnf val = new NewArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;NewArray?newArray&gt;*/
    public void set_newArray(NewArray val) { 
      super.newArray = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;ConstArray?constArray&gt; for ZBNF data store*/
    public ConstArray_Zbnf new_constArray() { 
      ConstArray_Zbnf val = new ConstArray_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;ConstArray?constArray&gt;*/
    public void set_constArray(ConstArray val) { 
      super.constArray = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Value?value&gt; for ZBNF data store*/
    public Value_Zbnf new_value() { 
      Value_Zbnf val = new Value_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Value?value&gt;*/
    public void set_value(ExprItem val) { 
      super.value = val;
    }
    
    
  
  }




  /**Class for Component while_statement.*/
  public static class While_statement_Zbnf extends JavaContent.While_statement {
  
    /**Creates an instance for the result Zbnf . &lt;Condition?condition&gt; for ZBNF data store*/
    public Condition_Zbnf new_condition() { 
      Condition_Zbnf val = new Condition_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Condition?condition&gt;*/
    public void set_condition(Condition val) { 
      super.condition = val;
    }
    
    
    /**Creates an instance for the result Zbnf . &lt;Statement?statement&gt; for ZBNF data store*/
    public Statement_Zbnf new_statement() { 
      Statement_Zbnf val = new Statement_Zbnf();
      return val; //Note: needs the derived Zbnf-Type.
    }
    
    /**Set the result. &lt;Statement?statement&gt;*/
    public void set_statement(Statement val) { 
      super.statement = val;
    }
    
    
  
  }


}

